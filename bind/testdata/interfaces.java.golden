// Java class go.interfaces.Interfaces is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public abstract class Interfaces {
    static {
        Seq.touch(); // for loading the native library
        init();
    }
    
    private Interfaces() {} // uninstantiable
    
    // touch is called from other bound packages to initialize this package
    public static void touch() {}
    
    private static native void init();
    
    public interface Error {
        public void Err() throws Exception;
        
        static final class Proxy extends Seq.Proxy implements Error {
            Proxy(Seq.Ref ref) { super(ref); }
        
            public native void Err() throws Exception;
        }
    }
    
    public interface I {
        public int Rand();
        
        static final class Proxy extends Seq.Proxy implements I {
            Proxy(Seq.Ref ref) { super(ref); }
        
            public native int Rand();
        }
    }
    
    public interface I1 {
        public void J();
        
        static final class Proxy extends Seq.Proxy implements I1 {
            Proxy(Seq.Ref ref) { super(ref); }
        
            public native void J();
        }
    }
    
    public interface I2 {
        public void G();
        
        static final class Proxy extends Seq.Proxy implements I2 {
            Proxy(Seq.Ref ref) { super(ref); }
        
            public native void G();
        }
    }
    
    public interface I3 {
        public I1 F();
        
        static final class Proxy extends Seq.Proxy implements I3 {
            Proxy(Seq.Ref ref) { super(ref); }
        
            public native I1 F();
        }
    }
    
    public interface LargerI extends I, SameI {
        public void AnotherFunc();
        public int Rand();
        
        static final class Proxy extends Seq.Proxy implements LargerI {
            Proxy(Seq.Ref ref) { super(ref); }
        
            public native void AnotherFunc();
            public native int Rand();
        }
    }
    
    public interface SameI {
        public int Rand();
        
        static final class Proxy extends Seq.Proxy implements SameI {
            Proxy(Seq.Ref ref) { super(ref); }
        
            public native int Rand();
        }
    }
    
    public interface WithParam {
        public void HasParam(boolean p0);
        
        static final class Proxy extends Seq.Proxy implements WithParam {
            Proxy(Seq.Ref ref) { super(ref); }
        
            public native void HasParam(boolean p0);
        }
    }
    
    
    public static native int Add3(I r);
    public static native void CallErr(Error e) throws Exception;
    public static native I Seven();
}
