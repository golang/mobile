// Java class go.interfaces.Error is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public interface Error {
    public void err() throws Exception;
    
}

// Java class go.interfaces.I is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public interface I {
    public int rand();
    
}

// Java class go.interfaces.I1 is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public interface I1 {
    public void j();
    
}

// Java class go.interfaces.I2 is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public interface I2 {
    public void g();
    
}

// Java class go.interfaces.I3 is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public interface I3 {
    public I1 f();
    
}

// Java class go.interfaces.LargerI is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public interface LargerI extends I, SameI {
    public void anotherFunc();
    public int rand();
    
}

// Java class go.interfaces.SameI is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public interface SameI {
    public int rand();
    
}

// Java class go.interfaces.WithParam is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public interface WithParam {
    public void hasParam(boolean p0);
    
}

// Java class go.interfaces.Interfaces is a proxy for talking to a Go program.
//   gobind -lang=java interfaces
//
// File is generated by gobind. Do not edit.
package go.interfaces;

import go.Seq;

public abstract class Interfaces {
    static {
        Seq.touch(); // for loading the native library
        _init();
    }
    
    private Interfaces() {} // uninstantiable
    
    // touch is called from other bound packages to initialize this package
    public static void touch() {}
    
    private static native void _init();
    
    private static final class proxyError extends Seq.Proxy implements Error {
    	proxyError(Seq.Ref ref) { super(ref); }
    
        public native void err() throws Exception;
    }
    private static final class proxyI extends Seq.Proxy implements I {
    	proxyI(Seq.Ref ref) { super(ref); }
    
        public native int rand();
    }
    private static final class proxyI1 extends Seq.Proxy implements I1 {
    	proxyI1(Seq.Ref ref) { super(ref); }
    
        public native void j();
    }
    private static final class proxyI2 extends Seq.Proxy implements I2 {
    	proxyI2(Seq.Ref ref) { super(ref); }
    
        public native void g();
    }
    private static final class proxyI3 extends Seq.Proxy implements I3 {
    	proxyI3(Seq.Ref ref) { super(ref); }
    
        public native I1 f();
    }
    private static final class proxyLargerI extends Seq.Proxy implements LargerI {
    	proxyLargerI(Seq.Ref ref) { super(ref); }
    
        public native void anotherFunc();
        public native int rand();
    }
    private static final class proxySameI extends Seq.Proxy implements SameI {
    	proxySameI(Seq.Ref ref) { super(ref); }
    
        public native int rand();
    }
    private static final class proxyWithParam extends Seq.Proxy implements WithParam {
    	proxyWithParam(Seq.Ref ref) { super(ref); }
    
        public native void hasParam(boolean p0);
    }
    
    
    public static native int add3(I r);
    public static native void callErr(Error e) throws Exception;
    public static native I seven();
}
